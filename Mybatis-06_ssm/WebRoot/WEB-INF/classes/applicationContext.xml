<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <!--Spring希望管理所有的业务逻辑组件-->
    <context:component-scan base-package="com.kyle.mybatis">
         <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--引入数据库的配置文件  -->
    <context:property-placeholder location="classpath:db.properties"/>
    <!--Spring用来控制业务逻辑,数据源,事务控制,aop,等 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
           <property name="user" value="${jdbc.username}"></property>
           <property name="password" value="${jdbc.password}"></property>
           <property name="jdbcUrl" value="${jdbc.url}"></property>
           <property name="driverClass" value="${jdbc.driver}"></property>
    </bean>
     
    <!-- spring事务管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
         <property name="dataSource" ref="dataSource"></property>
    </bean>
    
    <!-- 开启基于注解的事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    
    <!-- 整合mybatis
                     目的:1,spring管理所有组件.mapper的实现类
                 service ===> Dao @Autowired  :自动注入mapper  
            2, spring用来管理事务,spring声明事务       
    
     -->
     <!-- 创建出SqlSessionFactory对象,就不用在测试的时候写一大堆获取SqlSessionFactory的代码 -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
             <!-- 这里的配置相当于在mybatis-config.xml全局配置都可以搬到这里进行配置
                                           经常会使用到的可以搬来这里,然后配置需要经常改动的可以放在原先全局配置里面
              -->
          <!-- 这里就带代替了全局配置里的数据源了 -->
          <property name="dataSource" ref="dataSource"></property>
          <!--configLocation指定全局配置文件(mybatis-config.xml)的位置  -->
          <property name="configLocation" value="classpath:mybatis-config.xml"></property>
          <!--mapperLocations:指定mapper文件的位置  -->
          <property name="mapperLocations" value="classpath:mybatis/mapper/*.xml"></property>
    </bean>
  
     <!--扫描所有的mapper接口的实现,让这些mapper能够自动注入;
        base-package:指定mapper接口的包名
      -->
     <mybatis-spring:scan base-package="com.kyle.mybatis.dao"/>

</beans>
