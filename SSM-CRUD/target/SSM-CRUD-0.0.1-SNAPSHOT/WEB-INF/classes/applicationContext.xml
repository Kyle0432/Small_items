<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
  
  <!-- Spring的配置文件,这里主要配置一些业务逻辑有关的 -->
  
  <!-- 扫描相应的包下的组件 -->
  <context:component-scan base-package="com.kyle">
     <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
  </context:component-scan>
  
  <!-- 数据源 事务控制  -->
  <context:property-placeholder location="classpath:db.properties"/>
  <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="${jdbc.user}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
        <property name="driverClass" value="${jdbc.driverClass}"></property>
  </bean>
  
  <!--配置和Mybatis的整合  -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
       <!--配置数据源  -->
       <property name="dataSource" ref="dataSource"></property>
       <!--指定Mybatis全局配置文件的位置  -->
       <property name="configLocation" value="classpath:mybatis-config.xml"></property>
       <!--指定Mybatis,Mapper文件的位置  -->
       <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
  </bean>
  
<!-- 配置一个可以执行批量的sqlSession -->
  <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
       <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
       <constructor-arg name="executorType" value="BATCH"></constructor-arg>
  </bean> 

  <!-- 事务控制的配置 -->
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
       <!-- 要管理事务就得控制住数据源 -->
       <property name="dataSource" ref="dataSource"></property>
  </bean>
  
  <!-- 配置事务增强,事务如何切入 -->
  <tx:advice id="txAdvice" transaction-manager="transactionManager">
     <tx:attributes>
        <!-- 所有方法都是事务方法 -->
        <tx:method name="*"/>
        <!--以get开始的所有方法  -->
        <tx:method name="get*" read-only="true"/>
     </tx:attributes>
  </tx:advice>
  
  <!--开启基于注解的事务,使用xml配置形式的事务(必要主要的都是使用配置式)  -->
  <aop:config>
      <!-- 切入点表达式   第一个*返回值为任何类型   ..表示这个包下的类或子包下的*(所有类)里的方法,然后(..)表示参数为任何类型-->
      <aop:pointcut expression="execution(* com.kyle.crud.service..*(..))" id="txPoint"/>
      <!-- 配置事务增强 -->
      <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
  </aop:config> 
  
  <!-- 配置扫描器,将mybatis接口的实现加入到ioc容器中 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
       <!-- 扫描所有dao接口的实现,加入ioc容器中 -->
       <property name="basePackage" value="com.kyle.crud.dao"></property>
  </bean>
  
</beans>
