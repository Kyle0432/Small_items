<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
 PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
<!-- 
   1,Mybatis可以使用properies标签引用外部properties配置文件的内容
   resource:引入类路径下的资源
   url:引入网络路径或者磁盘路径下的资源
 -->
  <properties resource="db.properties"></properties>
<!-- 
   2,settings包含很多重要的设置项
     setting:用来设置每一个设置项
        name:设置项目
        value:设置项取值
 --> 
 <settings>     <!-- 表示自动开启驼峰命名规则,这样设置了,就不用在映射文件中的sql语句里写别名了 -->
    <setting name="mapUnderscoreToCamelCase" value="true"/>
    <!-- 添加以下两个配置,如果不用部门信息就不会发送的查询部门的sql
                     需要的时候才会进行查询,这样可以节省很多数据库资源
                     按需加载 = 延迟加载 = 懒加载         
     -->
    <!-- 开启懒加载,及时是默认的也要显示写true -->
    <setting name="lazyLoadingEnabled" value="true"/>
    <!-- 按需加载 -->
    <setting name="aggressiveLazyLoading" value="false"/>
 </settings>  
<!--
   3,typeAliases:别名处理器:可以为我们的java类型(全类名)起别名
  -->
  <typeAliases>
      <!-- typeAlias:为某个java类型 起别名
           type:指定要起别名的类型全类名;默认别名就是类名小写:employee
           alias:指定新的别名
      -->
      <!-- <typeAlias type="com.kyle.mybatis.helloworld.Employee" alias="emp"/> -->
      
      <!-- package:为某个包下的所有类批量起别名
           name:指定包名(为当前包以及下面所有的后代包的每一个类都起一个默认别名(类名小写))
       -->
       <package name="com.kyle.mybatis.helloworld"/>
      <!--批量起别名的情况下,使用@Alias注解为某个类型指定新的别名  -->
  </typeAliases>
<!-- 
    4,environments:环境们,mybatis可以配置多种环境,default指定使用某种环境 ,可以达到快速切换环境
            environment,配置一个具体的环境信息,必须有两个标签;id代表当前环境的唯一标识
               transactionManager:事务管理器,
                 type:就表示事务管理器的类型;JDBC(JdbcTransactionFactory)| MANAGED( )
               dataSource:数据源
                 type:数据源类型;UNPOOLED|POOLED|JNDI
       -->
  <environments default="development">
  
     <environment id="test">
     <transactionManager type="JDBC"></transactionManager>
       <dataSource type="POOLED">
               <property name="driver" value="${jdbc.driver}"/>
               <property name="url" value="${jdbc.url}"/>
               <property name="username" value="${jdbc.username}"/>
               <property name="password" value="${jdbc.password}"/>
       </dataSource>
     </environment>
     
     <environment id="development">
        <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
               <property name="driver" value="${jdbc.driver}"/>
               <property name="url" value="${jdbc.url}"/>
               <property name="username" value="${jdbc.username}"/>
               <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
     </environments>
<!-- 
    5,databaseIdProvider:支持多数据库厂商的;
     type="DB_VENDOR"作用是得到数据库厂商的标识
     mybatis就能根据数据库厂商标识来执行不同的sql
 -->     
     <databaseIdProvider type="DB_VENDOR">
     <!-- 为不同的数据库厂商起别名 -->
     <property name="MySQL" value="mysql"/>
     <property name="Oracle" value="oracle"/>
     <property name="SQL Server" value="sqlserver"/>
     </databaseIdProvider>
     
     <!-- 将我们写好的sql映射文件(EmployeeMapper.xml)一定要注册到全局配置文件(mybatis-config.xml)中 -->
  <mappers>
    <!-- 
        6,注册配置文件:
             resource:引用类路径下的sql映射文件
             url:引用网络路径或者磁盘路径下的sql映射文件
                   注册接口:
             class:引用(注册)接口
             1,有sql映射   文件,映射文件名必须和接口名相同,并且放在   与接口同一目录下
             2,没有sql映射 文件,所有的sql都是利用注解写在接口上    
                       推荐:比较重要复杂的Dao接口我们来写sql映射文件
                               不重要,简单的Dao接口为了开发速度可以使用注解
     -->
    <!-- 引用类路径下的sql映射文件  -->
    <!-- <mapper resource="EmployeeMapper.xml"/> -->
    
    <!-- 有sql映射   文件,映射文件名必须和接口名相同,并且放在   与接口同一目录下 -->
    <!-- <mapper class="com.kyle.mybatis.dao.EmployeeMapper"/> -->
    
    <!-- 没有sql映射 文件,所有的sql都是利用注解写在接口上    -->
    <!-- <mapper class="com.kyle.mybatis.dao.EmployeeMapperAnnotation"/> -->
    
    <!-- 批量注册,非注解接口的就得把映射文件和接口放在同一个包下 -->
    <package name="com.kyle.mybatis.dao"/>
  </mappers>
  
</configuration>