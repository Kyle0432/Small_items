<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="com.kyle.mybatis.dao.DepartmentMapper">
 <!-- 引用缓存,  namespace指定和哪个名称空间下的缓存一样 -->
 <cache-ref namespace="com.kyle.mybatis.dao.EmployeeMapper"/>
 <!-- public Department getDeptById(Integer id); -->
 <select id="getDeptById" resultType="com.kyle.mybatis.helloworld.Department">
    select id,department_name departmentName from department where id = #{id}
 </select>
 
 
 
 <!--    【一对多操作】
     collection嵌套结果集的方式,定义关联的集合类型元素的封装规则
  -->
 <resultMap type="com.kyle.mybatis.helloworld.Department" id="MyDept">
  <id column="did" property="id"/>
  <result column="dept_name" property="departmentName"/>
  <!-- collection 定义集合类型属性的封装规则
       ofType:指定集合里面元素的类型
   -->
  <collection property="emps" ofType="com.kyle.mybatis.helloworld.Employee">
    <!-- 定义这个集合中元素的封装规则 -->
    <id column="eid" property="id"/>
    <result column="last_name" property="lastName"/>
    <result column="email" property="email"/>
    <result column="gender" property="gender"/>
  </collection>
 </resultMap>
 <!--public Department getDeptByIdPlus(Integer id);  -->
 <select id="getDeptByIdPlus" resultMap="MyDept">
 <!-- 链表查询 -->
   select d.id did,d.department_name dept_name,
   e.id eid,e.last_name last_name,e.email email,e.gender gender
   from department d left join employee e on d.id = e.department_id
   where department_id = #{id}
 </select>
 
 
 <!-- 分步查询 -->
 <resultMap type="com.kyle.mybatis.helloworld.Department" id="MyDeptStep">
     <id column="id" property="id"/>
     <result column="department_name" property="departmentName"/>
     <collection property="emps" select="com.kyle.mybatis.dao.EmployeeMapperPlus.getEmpsByDeptId"
      column="id"></collection>
 </resultMap>
 
 <!-- public Department getDeptByIdStep(Integer id); -->
 <select id="getDeptByIdStep" resultMap="MyDeptStep">
          select id,department_name from department where id = #{id}
 </select>
 
 	
	<!-- 扩展：多列的值传递过去：
			将多列的值封装map传递；
			column="{key1=column1,key2=column2}"
		fetchType="lazy"：表示使用延迟加载；
				- lazy：延迟
				- eager：立即
	 -->
  </mapper> 