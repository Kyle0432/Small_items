<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
 <mapper namespace="com.kyle.mybatis.dao.EmployeeMapperDynamicSQL">
 
 <!--查询员工,要求,携带了哪个字段查询条件就带上这个字段的值  -->
  <!-- public List<Employee> getEmpsByConditionIf(Employee employee); -->
 <select id="getEmpsByConditionIf" resultType="com.kyle.mybatis.helloworld.Employee">
      select * from employee 
      <!-- where只会去掉第一个多出来的and 或者 or -->
   <where>
      <!-- test;判断表达式(OGNL)  c:if用法一样的
      
      -->
      <if test="id != null">
          id = #{id}
      </if>
      <if test="lastName != null and lastName != ''">
          and last_name like #{lastName}
      </if>
      <if test="email != null and email.trim() != ''">
          and email = #{email}
      </if>
      <!--ognl会进行字符串与数字的转换判断 比如 "0"=0  -->
      <if test="gender==0 or gender==1">
          and gender = #{gender}
      </if>
    </where>
 </select>
 
 
 
 <!-- public List<Employee> getEmpsByConditionTrim(Employee employee); -->
 <select id="getEmpsByConditionTrim" resultType="com.kyle.mybatis.helloworld.Employee">
     select * from employee
     <!-- 后面多出and或者or    where不能解决 只能解决前面多出来的and或者or -->
     <!-- 
     prefix="":前缀 trim标签体中是整个字符串拼装后的结果
              prefix给拼装后的整个字符串加一个前缀
     prefixOverrides="":
                                 前缀覆盖,去掉整个字符串前面多余的字符
     suffix="":后缀
                                  给拼装后的整个字符串加一个后缀
     suffixOverrides="":
                                  后缀覆盖,去掉整个字符串后面多余的字符
          -->
   <trim prefix="where" suffixOverrides="and">
      <if test="id != null">
          id = #{id} and
      </if>
      <if test="lastName != null and lastName != ''">
           last_name like #{lastName} and
      </if>
      <if test="email != null and email.trim() != ''">
           email = #{email} and
      </if>
      <!--ognl会进行字符串与数字的转换判断 比如 "0"=0  -->
      <if test="gender==0 or gender==1">
           gender = #{gender}
      </if>
    </trim>
 </select>
 
  <!-- public List<Employee> getEmpsByConditionChoose(Employee employee); -->
  <select id="getEmpsByConditionChoose" resultType="com.kyle.mybatis.helloworld.Employee">
     select * from employee 
     <where>
     <!-- 如果带了id就查id,如果带了lastName就查lastName,只会从中选一个 -->
         <choose>
               <when test="id != null">
                   id = #{id}
               </when>
               <when test="lastName != null">
                   last_Name like #{lastName}
               </when>
               <when test="email != null">
                   email = #{email}
               </when>
               <otherwise>
                   gender = 0
               </otherwise>
         </choose>
     </where>
  </select>
  
  
  <!-- public void updateEmp(Employee employee); -->
   <update id="updateEmp">
    <!--  Set标签的使用(建议使用)
     update employee 
     <set> 
     <if test="lastName != null">
     last_name = #{lastName},
     </if>
     <if test="email != null">
     email = #{email},
     </if>
     <if test="gender != null">
     gender = #{gender}
     </if>
     </set>
     where id = #{id} -->
     
     <!-- trim标签更新拼串 -->
     update employee 
     <trim prefix="set" suffixOverrides=","> 
     <if test="lastName != null">
     last_name = #{lastName},
     </if>
     <if test="email != null">
     email = #{email},
     </if>
     <if test="gender != null">
     gender = #{gender}
     </if>
     </trim>
     where id = #{id}
   </update>
   
   <!-- public List<Employee> getEmpsByConditionForeach(List<Integer> ); -->
    <select id="getEmpsByConditionForeach" resultType="com.kyle.mybatis.helloworld.Employee">
        select * from employee where id in
        <!-- 
            collection :指定要遍历的集合
               list类型的参数会特殊处理封装在map中,map的key就叫list
            item:将当前遍历出的元素赋值给指定的变量
            separator:每个元素之间分隔符
            open:遍历出所有结果拼接一个开始的字符
            close:遍历出所有结果拼接一个结束的字符
            index:遍历list的时候index是索引,item就是当前值
                            遍历map的时候index表示的就是map的key,item就是map的值
             #{变量名}就能取出变量的值也就是当前遍历出的元素
             -->
            <foreach collection="ids" item="item_id" separator=","
            open="(" close=")">
                #{item_id}
            </foreach>
    </select>
   
   
    <!-- 批量保存 -->
    <!-- public void addEmps(@Param("emps") List<Employee> emps); -->
    <!-- MySQL下批量保存,可以foreach遍历 支持 values(),(),()...语法 -->
    <insert id="addEmps">
      insert into employee(
         <include refid="insertColumn"></include>
      )
      values
      <foreach collection="emps" item="emp" separator=",">
             (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
      </foreach>
    </insert> 
 
 <!-- 
           两个内置参数
           不只是方法传递过来的参数可以被用来判断,取值...
     mybatis默认还有两个内置参数
        _parameter:代表整个参数
                           单个参数:_parameter就是这个参数
                           多个参数:参数会被封装为一个map:_parameter就是代表这个map
        _databaseId:如果配置了databaseIdProvider                   
           _databaseId就是代表当前数据库的别名
  -->
 
   <!--public List<Employee> getEmpsTestInnerParameter(Employee employee);  -->
   <select id="getEmpsTestInnerParameter" resultType="com.kyle.mybatis.helloworld.Employee">
      <!-- bind,可以将OGNL表达式的值绑定到一个变量,方便后来引用这个变量值 -->
      <!-- 这样写了在在mybatisTest里面就不用传值的时候加%了 -->
      <bind name="_lastName" value="'%'+lastName+'%'"/>
      <if test="_databaseId == mysql">
          select * from employee
          <if test="_parameter != null">
               <!-- 这里的_parameter就是代表的是employee -->
               where last_name like #{_parameter.lastName}          
          </if>
      </if>
  <!--     <if test="_databaseId == oracle">
          select * from employees
      </if>
        -->
   </select>
 
  <!-- 抽取可重用的sql片段,方便后面引用
     1,sql抽取:经常要查询的列名,或者插入用的列名抽取出来方便
     2,include来引用已经抽取的sql,
     3,include里面还可以有property属性可以在里面自定义一些属性
     sql标签内部就能使用自定义的属性 这里需要用${prop} 不能是#{}
     
  -->
 <sql id="insertColumn">
    last_name,email,gender,department_id <!-- ${属性名} -->
 </sql>
 </mapper> 