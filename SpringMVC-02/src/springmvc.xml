<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">
 <!-- 自动扫描该包下的所有文件 -->
 <context:component-scan base-package="com.kyle.springmvc"></context:component-scan>
 
 <!-- 配置视图解析器 -->
 <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
      <property name="prefix" value="/WEB-INF/views/"></property>
      <property name="suffix" value=".jsp"></property>
 </bean>
 
 	<!--  
		default-servlet-handler 将在 SpringMVC 上下文中定义一个 DefaultServletHttpRequestHandler,
		它会对进入 DispatcherServlet 的请求进行筛查, 如果发现是没有经过映射的请求, 就将该请求交由 WEB 应用服务器默认的 
		Servlet 处理. 如果不是静态资源的请求，才由 DispatcherServlet 继续处理

		一般 WEB 应用服务器默认的 Servlet 的名称都是 default.
		若所使用的 WEB 服务器的默认 Servlet 名称不是 default，则需要通过 default-servlet-name 属性显式指定
		
	-->
	<mvc:default-servlet-handler/><!-- 解决静态资源的问题 -->
	
	      <!-- 关于 mvc:annotation-driven
          • <mvc:annotation-driven /> 会自动注
                         册RequestMappingHandlerMapping
                        、RequestMappingHandlerAdapter 与
          ExceptionHandlerExceptionResolver 三个bean。
               • 还将提供以下支持：
          – 支持使用 ConversionService 实例对表单参数进行类型转换
          – 支持使用 @NumberFormat annotation、@DateTimeFormat
                             注解完成数据类型的格式化
          – 支持使用 @Valid 注解对 JavaBean 实例进行 JSR 303 验证
          – 支持使用 @RequestBody 和 @ResponseBody 注解 -->
	<!-- <mvc:annotation-driven conversion-service=“conversionService”/> 
	会将自定义的 ConversionService 注册到Spring MVC 的上下文中 -->
	<mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>
	
	<!-- 配置ConversionService -->
	<!-- 
	• ConversionService 是 Spring 类型转换体系的核心接口。
    • 可以利用 ConversionServiceFactoryBean 在 Spring 的 IOC 
              容器中定义一个 ConversionService. Spring 将自动识别出
      IOC 容器中的 ConversionService，并在 Bean 属性配置及
      Spring MVC 处理方法入参绑定等场合使用它进行数据的转换
    • 可通过 ConversionServiceFactoryBean 的 converters 属性
              注册自定义的类型转换器
	 -->
	 <!-- id要注入到 <mvc:annotation-driven>的属性conversion-service里面-->
	<bean id="conversionService" 
	class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
	      <property name="converters">
	           <set><!-- 表示指向EmployeeConverter类进行引用,同样employeeConverter是EmployeeConverter第一个字母小写 -->
	                <ref bean="employeeConverter"/>
	           </set>
	      </property>
	</bean>
	
	<!-- 配置国际化资源文件 -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
	      <property name="basename" value="i18n"></property>
	</bean>
	
	<mvc:interceptors>
	 <!-- 配置自定义的拦截器 -->
	    <bean class="com.kyle.springmvc.interceptors.FirstInterceptor"></bean>
	    
			<!-- 配置拦截器(不)作用的路径 -->
		<mvc:interceptor>
			<mvc:mapping path="/emps"/>
			<bean class="com.kyle.springmvc.interceptors.SecondInterceptor"></bean>
		</mvc:interceptor>
	
	</mvc:interceptors>
</beans>
